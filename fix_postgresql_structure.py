#!/usr/bin/env python3
"""
Corrige la tabla PostgreSQL para que coincida EXACTAMENTE con SQLite
"""
import asyncio
import asyncpg

POSTGRES_URL = "postgresql://postgres:xhinRHxDvcdHNqyQKDTUbDKRLhYNLDum@ballast.proxy.rlwy.net:54363/railway"

async def fix_postgresql_to_match_sqlite():
    """Corrige PostgreSQL para que coincida EXACTAMENTE con SQLite"""

    print("üîß CORRIGIENDO POSTGRESQL PARA COINCIDIR CON SQLITE")
    print("=" * 50)

    conn = await asyncpg.connect(POSTGRES_URL)

    try:
        # 1. Renombrar original_url de vuelta a original_filename
        print("üìù Renombrando original_url -> original_filename...")
        try:
            await conn.execute("ALTER TABLE images RENAME COLUMN original_url TO original_filename")
            print("  ‚úÖ original_filename restaurado")
        except Exception as e:
            print(f"  ‚ö†Ô∏è Ya existe o error: {e}")

        # 2. Agregar format si no existe (est√° en la migraci√≥n)
        print("üìù Verificando campo format...")
        cols = await conn.fetch("SELECT column_name FROM information_schema.columns WHERE table_name = 'images'")
        existing_cols = [col['column_name'] for col in cols]

        if 'format' not in existing_cols:
            await conn.execute("ALTER TABLE images ADD COLUMN format VARCHAR(50)")
            print("  ‚úÖ format agregado")
        else:
            print("  ‚úÖ format ya existe")

        # 3. Verificar estructura final
        print(f"\nüìã ESTRUCTURA FINAL DE POSTGRESQL:")
        final_cols = await conn.fetch("""
            SELECT column_name, data_type
            FROM information_schema.columns
            WHERE table_name = 'images'
            ORDER BY ordinal_position
        """)

        for col in final_cols:
            print(f"  ‚úÖ {col['column_name']}: {col['data_type']}")

        # 4. Contar registros
        count = await conn.fetchval("SELECT COUNT(*) FROM images")
        print(f"\nüìä Total im√°genes: {count}")

        print(f"\n‚ú® ¬°POSTGRESQL CORREGIDO PARA COINCIDIR CON SQLITE!")
        return True

    except Exception as e:
        print(f"‚ùå Error: {e}")
        import traceback
        traceback.print_exc()
        return False
    finally:
        await conn.close()

if __name__ == "__main__":
    success = asyncio.run(fix_postgresql_to_match_sqlite())
    if success:
        print("\nüéØ POSTGRESQL AHORA COINCIDE CON SQLITE")
    else:
        print("\nüí• Error en la correcci√≥n")
