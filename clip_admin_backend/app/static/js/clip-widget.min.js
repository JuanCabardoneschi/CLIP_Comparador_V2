/**
 * CLIP Visual Search Widget - Embeddable
 * Versión minificada para embeber en sitios web de clientes
 */

(function() {
    'use strict';

    // Marcar que el widget se cargó correctamente
    window.clipWidgetLoaded = true;

    // Verificar configuración
    if (!window.CLIPConfig) {
        console.error('CLIP Widget: Configuración no encontrada. Define window.CLIPConfig antes de cargar el widget.');
        return;
    }

    const config = {
        apiKey: window.CLIPConfig.apiKey || '',
        serverUrl: window.CLIPConfig.serverUrl || 'http://localhost:5000',
        containerId: window.CLIPConfig.containerId || 'clip-search-widget',
        maxResults: window.CLIPConfig.maxResults || 3,
        threshold: window.CLIPConfig.threshold || 0.3,
        showSimilarity: window.CLIPConfig.showSimilarity !== false,
        buttonText: window.CLIPConfig.buttonText || 'Buscar Productos Similares',
        placeholder: window.CLIPConfig.placeholder || 'Arrastra una imagen aquí para buscar productos similares'
    };

    // CSS inline para el widget
    const widgetCSS = `
        .clip-widget {
            font-family: Arial, sans-serif;
            border: 1px solid #ddd;
            border-radius: 8px;
            padding: 20px;
            text-align: center;
            background: white;
            max-width: 400px;
            margin: 20px auto;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .clip-widget h5 {
            color: #007bff;
            margin-bottom: 10px;
            font-size: 18px;
        }
        .clip-widget p {
            color: #666;
            margin-bottom: 15px;
            font-size: 14px;
        }
        .upload-area {
            border: 2px dashed #007bff;
            border-radius: 8px;
            padding: 30px 20px;
            background: #f8f9fa;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-bottom: 15px;
        }
        .upload-area:hover {
            border-color: #0056b3;
            background: #e3f2fd;
        }
        .upload-area.dragover {
            border-color: #28a745;
            background: #d4edda;
        }
        .upload-text {
            color: #007bff;
        }
        .upload-text strong {
            font-size: 16px;
            display: block;
            margin-bottom: 5px;
        }
        .upload-text small {
            font-size: 12px;
            color: #666;
        }
        .clip-widget button {
            background: #007bff;
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
            margin: 15px auto;
            display: block;
        }
        .clip-widget button:hover {
            background: #0056b3;
        }
        .clip-widget button:disabled {
            background: #6c757d;
            cursor: not-allowed;
        }
        .clip-widget .preview {
            margin: 15px 0;
        }
        .clip-widget .preview img {
            max-width: 200px;
            max-height: 150px;
            border-radius: 8px;
        }
        .clip-widget .loading {
            color: #007bff;
        }
        .clip-widget .results {
            margin-top: 20px;
            text-align: left;
        }
        .clip-widget .result-item {
            display: flex;
            align-items: center;
            padding: 10px;
            border: 1px solid #eee;
            border-radius: 5px;
            margin-bottom: 10px;
            background: white;
        }
        .clip-widget .result-item img {
            width: 50px;
            height: 50px;
            object-fit: cover;
            border-radius: 4px;
            margin-right: 10px;
        }
        .clip-widget .result-info {
            flex: 1;
        }
        .clip-widget .result-title {
            font-weight: bold;
            margin-bottom: 3px;
        }
        .clip-widget .result-sku {
            font-size: 11px;
            color: #888;
            margin-bottom: 2px;
        }
        .clip-widget .result-similarity {
            font-size: 12px;
            color: #666;
        }
        .clip-widget .error {
            color: #dc3545;
            background: #f8d7da;
            border: 1px solid #f5c6cb;
            border-radius: 4px;
            padding: 10px;
            margin-top: 10px;
        }
    `;

    // Inyectar CSS
    const style = document.createElement('style');
    style.textContent = widgetCSS;
    document.head.appendChild(style);

    class CLIPWidget {
        constructor(containerId) {
            this.container = document.getElementById(containerId);
            if (!this.container) {
                console.error(`CLIP Widget: Contenedor '${containerId}' no encontrado`);
                return;
            }

            this.selectedFile = null;
            this.init();
        }

        init() {
            this.render();
            this.attachEvents();
        }

        render() {
            this.container.innerHTML = `
                <div class="clip-widget" id="clipWidget">
                    <h5>� Sube una imagen para buscar</h5>
                    <p>Haz clic aquí o arrastra una imagen</p>
                    <div class="upload-area" id="clipUploadArea">
                        <div class="upload-text">
                            <strong>Seleccionar archivo</strong><br>
                            <small>o arrastra y suelta aquí</small>
                        </div>
                        <input type="file" accept="image/*" id="clipFileInput" style="display: none;">
                    </div>
                    <div id="clipPreview" class="preview" style="display: none;"></div>
                    <button id="clipSearchBtn" disabled style="display: none;">${config.buttonText}</button>
                    <div id="clipResults" class="results" style="display: none;"></div>
                    <div id="clipError" class="error" style="display: none;"></div>
                </div>
            `;
        }

        attachEvents() {
            const uploadArea = document.getElementById('clipUploadArea');
            const fileInput = document.getElementById('clipFileInput');
            const searchBtn = document.getElementById('clipSearchBtn');

            // Click en el área de upload
            uploadArea.addEventListener('click', () => {
                fileInput.click();
            });

            // Drag and drop
            uploadArea.addEventListener('dragover', (e) => {
                e.preventDefault();
                uploadArea.classList.add('dragover');
            });

            uploadArea.addEventListener('dragleave', () => {
                uploadArea.classList.remove('dragover');
            });

            uploadArea.addEventListener('drop', (e) => {
                e.preventDefault();
                uploadArea.classList.remove('dragover');
                const files = e.dataTransfer.files;
                if (files.length > 0) {
                    this.handleFile(files[0]);
                }
            });

            // File input
            fileInput.addEventListener('change', (e) => {
                if (e.target.files.length > 0) {
                    this.handleFile(e.target.files[0]);
                }
            });

            // Search button
            searchBtn.addEventListener('click', () => {
                this.performSearch();
            });
        }

        handleFile(file) {
            if (!file.type.startsWith('image/')) {
                this.showError('Por favor selecciona un archivo de imagen válido.');
                return;
            }

            if (file.size > 15 * 1024 * 1024) {
                this.showError('El archivo es demasiado grande. Máximo 15MB.');
                return;
            }

            this.selectedFile = file;

            // Mostrar preview
            const reader = new FileReader();
            reader.onload = (e) => {
                const preview = document.getElementById('clipPreview');
                preview.innerHTML = `<img src="${e.target.result}" alt="Preview">`;
                preview.style.display = 'block';

                // Habilitar y mostrar botón de búsqueda
                const searchBtn = document.getElementById('clipSearchBtn');
                searchBtn.disabled = false;
                searchBtn.style.display = 'block';
                this.hideError();
            };
            reader.readAsDataURL(file);
        }

        async performSearch() {
            if (!this.selectedFile) {
                this.showError('Por favor selecciona una imagen primero.');
                return;
            }

            if (!config.apiKey) {
                this.showError('API Key no configurada.');
                return;
            }

            const searchBtn = document.getElementById('clipSearchBtn');
            const originalText = searchBtn.textContent;

            try {
                // Mostrar loading
                searchBtn.textContent = 'Buscando...';
                searchBtn.disabled = true;
                this.hideError();
                this.hideResults();

                // Preparar FormData
                const formData = new FormData();
                formData.append('image', this.selectedFile);
                formData.append('limit', config.maxResults.toString());
                formData.append('threshold', config.threshold.toString());

                // Realizar búsqueda
                const response = await fetch(`${config.serverUrl}/api/search`, {
                    method: 'POST',
                    headers: {
                        'X-API-Key': config.apiKey
                    },
                    body: formData
                });

                if (!response.ok) {
                    throw new Error(`Error ${response.status}: ${response.statusText}`);
                }

                const data = await response.json();

                if (data.success) {
                    this.displayResults(data.results);
                } else {
                    this.showError(data.message || 'Error en la búsqueda');
                }

            } catch (error) {
                console.error('Search error:', error);
                this.showError(`Error: ${error.message}`);
            } finally {
                searchBtn.textContent = originalText;
                searchBtn.disabled = false;
            }
        }

        displayResults(results) {
            const resultsContainer = document.getElementById('clipResults');

            if (!results || results.length === 0) {
                resultsContainer.innerHTML = '<p>No se encontraron productos similares.</p>';
                resultsContainer.style.display = 'block';
                return;
            }

            let html = '<h6>Productos similares encontrados:</h6>';

            results.forEach(result => {
                const similarity = config.showSimilarity ?
                    `<div class="result-similarity">${(result.similarity * 100).toFixed(1)}% similar</div>` : '';

                html += `
                    <div class="result-item">
                        <img src="${result.image_url}" alt="${result.name}">
                        <div class="result-info">
                            <div class="result-title">${result.name}</div>
                            <div class="result-sku">SKU: ${result.sku}</div>
                            ${similarity}
                        </div>
                    </div>
                `;
            });

            resultsContainer.innerHTML = html;
            resultsContainer.style.display = 'block';
        }

        showError(message) {
            const errorDiv = document.getElementById('clipError');
            errorDiv.textContent = message;
            errorDiv.style.display = 'block';
        }

        hideError() {
            document.getElementById('clipError').style.display = 'none';
        }

        hideResults() {
            document.getElementById('clipResults').style.display = 'none';
        }
    }

    // Inicializar widget cuando el DOM esté listo
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
            new CLIPWidget(config.containerId);
        });
    } else {
        new CLIPWidget(config.containerId);
    }

    // Exponer función global para reinicializar
    window.initCLIPWidget = function(newConfig = {}) {
        Object.assign(config, newConfig);
        new CLIPWidget(config.containerId);
    };

})();
